// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: post.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :one
INSERT INTO post (id, title, body)
VALUES (uuid_generate_v4(),$1, $2)
RETURNING id, title, body
`

type CreatePostParams struct {
	Title string `json:"title"`
	Body  string `json:"body"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, createPost, arg.Title, arg.Body)
	var i Post
	err := row.Scan(&i.ID, &i.Title, &i.Body)
	return i, err
}

const getPostByID = `-- name: GetPostByID :one
SELECT id, title, body FROM post
WHERE id = $1
`

func (q *Queries) GetPostByID(ctx context.Context, id uuid.UUID) (Post, error) {
	row := q.db.QueryRow(ctx, getPostByID, id)
	var i Post
	err := row.Scan(&i.ID, &i.Title, &i.Body)
	return i, err
}

const getPublicPosts = `-- name: GetPublicPosts :many
SELECT id, title, body from post
`

func (q *Queries) GetPublicPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.Query(ctx, getPublicPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(&i.ID, &i.Title, &i.Body); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
