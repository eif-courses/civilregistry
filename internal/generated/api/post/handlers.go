// Code generated by genapi. DO NOT EDIT manually.
package post

import (
	"encoding/json"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"go.uber.org/zap"
)

type Handlers struct {
	service *Service
	logger  *zap.SugaredLogger
}

func NewHandlers(service *Service, logger *zap.SugaredLogger) *Handlers {
	return &Handlers{
		service: service,
		logger:  logger,
	}
}

// CreatePost creates a new post
// @Summary Create post
// @Description Create a new post record
// @Tags post
// @Accept json
// @Produce json
// @Param request body CreatePostRequest true "post data"
// @Success 201 {object} map[string]interface{} "Created post"
// @Failure 400 {object} map[string]interface{} "Invalid request"
// @Failure 500 {object} map[string]interface{} "Internal server error"
// @Router /api/post/ [post]
func (h *Handlers) CreatePost(w http.ResponseWriter, r *http.Request) {

	var req CreatePostRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		h.logger.Errorf("Failed to decode request: %v", err)
		http.Error(w, "Invalid request body", http.StatusBadRequest)
		return
	}

	result, err := h.service.CreatePost(r.Context(), req.Title, req.Body)

	if err != nil {
		h.logger.Errorf("Service error: %v", err)
		http.Error(w, "Internal server error", http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "application/json")

	w.WriteHeader(http.StatusCreated)
	json.NewEncoder(w).Encode(map[string]interface{}{
		"message": "post created successfully",
		"data":    result,
	})

}

type CreatePostRequest struct {
	Title string `json:"title" example:"My Post Title"`
	Body  string `json:"body" example:"This is the post content"`
}

// GetPostByID retrieves a post by ID
// @Summary Get post by ID
// @Description Get a specific post by its ID
// @Tags post
// @Accept json
// @Produce json
// @Param id path string true "post ID"
// @Success 200 {object} map[string]interface{} "post found"
// @Failure 400 {object} map[string]interface{} "Invalid ID"
// @Failure 404 {object} map[string]interface{} "post not found"
// @Failure 500 {object} map[string]interface{} "Internal server error"
// @Router /api/post/{id} [get]
func (h *Handlers) GetPostByID(w http.ResponseWriter, r *http.Request) {

	idParam := chi.URLParam(r, "id")

	id, err := uuid.Parse(idParam)
	if err != nil {
		h.logger.Errorf("Invalid UUID: %v", err)
		http.Error(w, "Invalid ID format", http.StatusBadRequest)
		return
	}

	result, err := h.service.GetPostByID(r.Context(), id)

	if err != nil {
		h.logger.Errorf("Service error: %v", err)
		http.Error(w, "Internal server error", http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "application/json")

	json.NewEncoder(w).Encode(map[string]interface{}{
		"data": result,
	})

}

// GetPublicPosts retrieves all posts
// @Summary Get all posts
// @Description Retrieve all post records
// @Tags post
// @Accept json
// @Produce json
// @Success 200 {object} map[string]interface{} "List of posts"
// @Failure 500 {object} map[string]interface{} "Internal server error"
// @Router /api/post/ [get]
func (h *Handlers) GetPublicPosts(w http.ResponseWriter, r *http.Request) {

	result, err := h.service.GetPublicPosts(r.Context())

	if err != nil {
		h.logger.Errorf("Service error: %v", err)
		http.Error(w, "Internal server error", http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "application/json")

	json.NewEncoder(w).Encode(map[string]interface{}{
		"data":  result,
		"count": len(result),
	})

}

// HealthCheck checks the health of the post service
// @Summary Health check
// @Description Check if the post service is healthy
// @Tags post
// @Produce json
// @Success 200 {object} map[string]interface{} "Service is healthy"
// @Failure 503 {object} map[string]interface{} "Service is unhealthy"
// @Router /api/post/health [get]
func (h *Handlers) HealthCheck(w http.ResponseWriter, r *http.Request) {
	err := h.service.HealthCheck(r.Context())
	if err != nil {
		http.Error(w, "Service unhealthy", http.StatusServiceUnavailable)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]interface{}{
		"status":  "healthy",
		"service": "post-api",
		"version": "1.0.0",
	})
}
