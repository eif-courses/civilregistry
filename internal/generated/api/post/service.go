// Code generated by genapi. DO NOT EDIT manually.
package post

import (
	"context"
	"fmt"

	"github.com/eif-courses/civilregistry/internal/generated/repository" // âœ… Correct path
	"github.com/google/uuid"
	"go.uber.org/zap"
)

type Service struct {
	repo   *repository.Queries
	logger *zap.SugaredLogger
}

func NewService(repo *repository.Queries, logger *zap.SugaredLogger) *Service {
	return &Service{
		repo:   repo,
		logger: logger,
	}
}

func (s *Service) CreatePost(ctx context.Context, title, body string) (*repository.Post, error) {
	s.logger.Infof("Creating new CreatePost: %s", title)

	if title == "" || body == "" {
		return nil, fmt.Errorf("title and body are required")
	}

	result, err := s.repo.CreatePost(ctx, repository.CreatePostParams{
		Title: title,
		Body:  body,
	})
	if err != nil {
		s.logger.Errorf("Failed CreatePost: %v", err)
		return nil, fmt.Errorf("failed CreatePost: %w", err)
	}

	s.logger.Infof("CreatePost completed successfully with ID: %s", result.ID)
	return &result, nil
}

func (s *Service) GetPostByID(ctx context.Context, id uuid.UUID) (*repository.Post, error) {
	s.logger.Infof("GetPostByID called for ID: %s", id)

	result, err := s.repo.GetPostByID(ctx, id)
	if err != nil {
		s.logger.Errorf("Failed GetPostByID: %v", err)
		return nil, fmt.Errorf("failed GetPostByID: %w", err)
	}

	s.logger.Info("GetPostByID completed successfully")
	return &result, nil
}

func (s *Service) GetPublicPosts(ctx context.Context) ([]repository.Post, error) {
	s.logger.Info("GetPublicPosts called")

	result, err := s.repo.GetPublicPosts(ctx)
	if err != nil {
		s.logger.Errorf("Failed GetPublicPosts: %v", err)
		return nil, fmt.Errorf("failed GetPublicPosts: %w", err)
	}

	s.logger.Infof("GetPublicPosts returned %d items", len(result))
	return result, nil
}

func (s *Service) HealthCheck(ctx context.Context) error {
	s.logger.Info("Performing health check")
	return nil
}
